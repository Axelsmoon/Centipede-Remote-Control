import 'dart:convert';
import 'dart:typed_data';

import 'dart:math' as math;
import 'package:flutter/material.dart';
//import 'package:flutter_blue/flutter_blue.dart';
import 'dart:io';
import 'dart:async';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';

import 'BluetoothScreen.dart';
//import 'package:scoped_model/scoped_model.dart';

/*void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MainScreen(),
    );
  }
}*/

class MainScreen extends StatefulWidget {
  final BluetoothDevice? server;
  final bool checkAvailability;

  const MainScreen({this.checkAvailability = true, required this.server});

  @override
  _MainScreenState createState() => new _MainScreenState();
}


class _MainScreenState extends State<MainScreen> {

  BluetoothState _bluetoothState = BluetoothState.UNKNOWN;

  String _address = "...";
  String _name = "...";

  Timer? _discoverableTimeoutTimer;
  int _discoverableTimeoutSecondsLeft = 0;
  bool _autoAcceptPairingRequests = false;

  final TextEditingController textEditingController =
    new TextEditingController();
  BluetoothConnection? connection;
  List<_Message> messages = List<_Message>.empty(growable: true);
  String _messageBuffer = '';
  static final clientID = 0;
  bool isConnecting = true;
  bool get isConnected => (connection?.isConnected ?? false);

  bool isDisconnecting = false;
  List<_DeviceWithAvailability> devices =
  List<_DeviceWithAvailability>.empty(growable: true);

  @override
  void initState() {
    super.initState();

    //_fetchConnectedDevices();
    //scanDevices();
    //initializeBluetooth();

    // Get current state
    FlutterBluetoothSerial.instance.state.then((state) {
      setState(() {
        _bluetoothState = state;
      });
    });

    FlutterBluetoothSerial.instance
        .getBondedDevices()
        .then((List<BluetoothDevice> bondedDevices) {
      setState(() {
        devices = bondedDevices
            .map(
              (device) => _DeviceWithAvailability(
            device,
            widget.checkAvailability
                ? _DeviceAvailability.maybe
                : _DeviceAvailability.yes,
          ),
        )
            .toList();
      });
    });

    Future.doWhile(() async {
      // Wait if adapter not enabled
      if ((await FlutterBluetoothSerial.instance.isEnabled) ?? false) {
        return false;
      }
      await Future.delayed(Duration(milliseconds: 0xDD));
      return true;
    }).then((_) {
      // Update the address field
      FlutterBluetoothSerial.instance.address.then((address) {
        setState(() {
          _address = address!;
        });
      });
    });

    FlutterBluetoothSerial.instance.name.then((name) {
      setState(() {
        _name = name!;
      });
    });

    // Listen for futher state changes
    FlutterBluetoothSerial.instance
        .onStateChanged()
        .listen((BluetoothState state) {
      setState(() {
        _bluetoothState = state;

        // Discoverable mode is disabled when Bluetooth gets disabled
        _discoverableTimeoutTimer = null;
        _discoverableTimeoutSecondsLeft = 0;
      });
    });

    BluetoothConnection.toAddress(widget.server?.address).then((_connection) {
      print('Connected to the device');
      connection = _connection;
      setState(() {
        isConnecting = false;
        isDisconnecting = false;
      });

      connection!.input!.listen(_onDataReceived).onDone(() {
        // Example: Detect which side closed the connection
        // There should be `isDisconnecting` flag to show are we are (locally)
        // in middle of disconnecting process, should be set before calling
        // `dispose`, `finish` or `close`, which all causes to disconnect.
        // If we except the disconnection, `onDone` should be fired as result.
        // If we didn't except this (no flag set), it means closing by remote.
        if (isDisconnecting) {
          print('Disconnecting locally!');
        } else {
          print('Disconnected remotely!');
        }
        if (this.mounted) {
          setState(() {});
        }
      });
    }).catchError((error) {
      print('Cannot connect, exception occured');
      print(error);
    });

  }


  @override
  void dispose() {
    FlutterBluetoothSerial.instance.setPairingRequestHandler(null);
    _discoverableTimeoutTimer?.cancel();
    super.dispose();
    if (isConnected) {
      isDisconnecting = true;
      connection?.dispose();
      connection = null;
    }
  }

// Function to send commands using the discovered characteristic
  //void sendCommand(String command) {}
  void _sendMessage(String text) async {
    text = text.trim();
    textEditingController.clear();

    if (text.length > 0) {
      try {
        connection!.output.add(Uint8List.fromList(utf8.encode(text + "\r\n")));
        await connection!.output.allSent;

        setState(() {
          messages.add(_Message(clientID, text));
        });


      } catch (e) {
        // Ignore error, but notify state
        setState(() {});
      }
    }
  }

  void _onDataReceived(Uint8List data) {
    // Allocate buffer for parsed data
    int backspacesCounter = 0;
    data.forEach((byte) {
      if (byte == 8 || byte == 127) {
        backspacesCounter++;
      }
    });
    Uint8List buffer = Uint8List(data.length - backspacesCounter);
    int bufferIndex = buffer.length;

    // Apply backspace control character
    backspacesCounter = 0;
    for (int i = data.length - 1; i >= 0; i--) {
      if (data[i] == 8 || data[i] == 127) {
        backspacesCounter++;
      } else {
        if (backspacesCounter > 0) {
          backspacesCounter--;
        } else {
          buffer[--bufferIndex] = data[i];
        }
      }
    }

    // Create message if there is new line character
    String dataString = String.fromCharCodes(buffer);
    int index = buffer.indexOf(13);
    if (~index != 0) {
      setState(() {
        messages.add(
          _Message(
            1,
            backspacesCounter > 0
                ? _messageBuffer.substring(
                0, _messageBuffer.length - backspacesCounter)
                : _messageBuffer + dataString.substring(0, index),
          ),
        );
        _messageBuffer = dataString.substring(index);
      });
    } else {
      _messageBuffer = (backspacesCounter > 0
          ? _messageBuffer.substring(
          0, _messageBuffer.length - backspacesCounter)
          : _messageBuffer + dataString);
    }
  }


  @override
  Widget build(BuildContext context) {
    return Stack(
      children: <Widget>[
        //Background Image
        Container(
          /*decoration: BoxDecoration(
            image: DecorationImage(
              image: AssetImage('assets/Sandy_Background.png'),
              fit: BoxFit.cover,
              //height: double.infinity,
              //width: double.infinity,
            ),
          ),*/
        ),
        Scaffold(
          backgroundColor: Colors.blue,
          appBar: AppBar(
              backgroundColor: Colors.transparent,
              elevation: 0,
              title: Text('Centipede'),
              centerTitle: true,
              shape: Border(
                bottom: BorderSide(
                    color: Colors.grey.withOpacity(0.2), width: 1.0),
              ),
              leading:
              IconButton(
                icon: Image.asset('assets/IMG_0387.png'),
                onPressed: () {
                  Navigator.pushNamed(context, '/home');
                },
              ),
              actions: [
                PopupMenuButton<String>(
                  icon: const Icon(Icons.menu),
                  onSelected: (value) {
                    Navigator.pushNamed(context, '/' "$value");
                    //print('Selected: $value');
                  },
                  itemBuilder: (BuildContext context) {
                    return [
                      const PopupMenuItem<String>(
                        value: 'bt',
                        child: Text('Bluetooth'),
                      ),
                      const PopupMenuItem<String>(
                        value: 'register',
                        child: Text('Sign Up'),
                      ),
                      const PopupMenuItem<String>(
                        value: 'about',
                        child: Text('About'),
                      ),
                    ];
                  },
                )
              ]
          ),
          body:
              Column(
                children: <Widget>[

          Container(
            constraints: BoxConstraints(
              maxHeight: 100, // Set the maximum height
            ),
            child: ListView(
              children: <Widget>[
                Divider(),
                ListTile(title: const Text('General')),
                SwitchListTile(
                  title: const Text('Enable Bluetooth'),
                  value: _bluetoothState.isEnabled,
                  onChanged: (bool value) {
                    // Do the request and update with the true value then
                    future() async {
                      // async lambda seems to not working
                      if (value)
                        await FlutterBluetoothSerial.instance.requestEnable();
                      else
                        await FlutterBluetoothSerial.instance.requestDisable();
                    }

                    future().then((_) {
                      setState(() {});
                    });
                  },
                ),
                ListTile(
                  title: const Text('Bluetooth status'),
                  subtitle: Text(_bluetoothState.toString()),
                  trailing: ElevatedButton(
                    child: const Text('Settings'),
                    onPressed: () {
                      FlutterBluetoothSerial.instance.openSettings();
                    },
                  ),
                ),

                Divider(),


              ],
            ),


          ),

          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              DPad(sendCommand: _sendMessage), // Pass the sendCommand method to DPad
              //SET (angle) command
              Lever(sendCommand: _sendMessage),
              //WAVE (speed) command
            ],
          ),

          /*Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      sendCommand('forward');
                    },
                    child: Text('Forward'),
                    style: ElevatedButton.styleFrom(
                        backgroundColor:Colors.yellow[100],
                        foregroundColor: Colors.black,
                        padding: EdgeInsets.all(20.0),
                        disabledBackgroundColor: Colors.yellow[100]
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      sendCommand('backward');
                    },
                    child: Text('Backward'),
                    style: ElevatedButton.styleFrom(
                        backgroundColor:Colors.yellow[100],
                        foregroundColor: Colors.black,
                        padding: EdgeInsets.all(20.0),
                        disabledBackgroundColor: Colors.yellow[100]
                    ),
                  ),
                  // Add buttons for other directions (left, right, etc.)
                ],
              ),*/
              ],
        ),
        ),
      ],
    );
  }
}




class MainPage extends StatefulWidget {
  @override
  _MainPageState createState() => _MainPageState();
}
class _MainPageState extends State<MainPage> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}

class _Message {
  int whom;
  String text;

  _Message(this.whom, this.text);
}

class _DeviceWithAvailability {
  BluetoothDevice device;
  _DeviceAvailability availability;
  int? rssi;

  _DeviceWithAvailability(this.device, this.availability, [this.rssi]);
}

enum _DeviceAvailability {
  no,
  maybe,
  yes,
}

class DPad extends StatelessWidget {
  final void Function(String) sendCommand; // Define sendCommand with a String parameter

  DPad({required this.sendCommand});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(height: 50),
            PentagonButton(//top dpad
              width: 50, // Set the desired width
              height: 30, // Set the desired height
              rotationAngle: math.pi/2, // Rotate by 90 degrees
              onTap: () {
                // Define the action for the bottom PentagonButton here
              },
            ),

            //SizedBox(height: 10),
            Row(
              children: [
                PentagonButton(//left dpad
                  width: 50, // Set the desired width
                  height: 30, // Set the desired height
                  rotationAngle: 2*(math.pi), // Rotate by 360 degrees
                  onTap: () {
                    // Define the action for the bottom PentagonButton here
                    sendCommand("WAVE 64 -30");
                  },
                ),

                SizedBox(width: 10),
                PentagonButton(//right dpad
                  width: 50, // Set the desired width
                  height: 30, // Set the desired height
                  rotationAngle: math.pi, // Rotate by 180 degrees
                  onTap: () {
                    // Define the action for the bottom PentagonButton here
                    sendCommand("WAVE 64 30");
                  },
                ),

              ],
            ),
            SizedBox(width: 10),
            PentagonButton(//bottom dpad
              width: 50, // Set the desired width
              height: 30, // Set the desired height
              rotationAngle: 3*math.pi / 2, // Rotate by 270 degrees
              onTap: () {
                // Define the action for the bottom PentagonButton here
              },
            ),

            SizedBox(height: 10),
                //PentagonButton(),
              ],

        ),

      ],
    );
  }
}

class PentagonButton extends StatelessWidget {
  final double width;
  final double height;
  final double rotationAngle; // Angle of rotation in radians
  final VoidCallback onTap; // Callback function for onTap event

  PentagonButton({required this.width,
    required this.height,
    this.rotationAngle = 0.0,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: width,
      height: height,
      child: CustomPaint(
        size: Size(width, height),
        painter: PentagonPainter(rotationAngle: rotationAngle),
        child: InkWell(
          onTap: onTap, // Call the provided callback function onTap
          child: Center(
            child: Text(
              'Button',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
      ),
    );
  }
}



class PentagonPainter extends CustomPainter {
  final double rotationAngle; // Angle of rotation in radians

  PentagonPainter({this.rotationAngle = 0.0});

  @override
  void paint(Canvas canvas, Size size) {
    Paint paint = Paint()..color = Colors.grey;
    Path path = Path();

    // Calculate the center of the pentagon
    double centerX = size.width / 2;
    double centerY = size.height / 2;

    // Rotate the canvas around the center
    canvas.translate(centerX, centerY);
    canvas.rotate(rotationAngle);
    canvas.translate(-centerX, -centerY);

    // Calculate the vertices of the rotated pentagon
    path.moveTo(centerX + size.width / 2 * math.cos(0), centerY + size.width / 2 * math.sin(0));
    for (int i = 1; i <= 5; i++) {
      path.lineTo(
        centerX + size.width / 2 * math.cos(i * 2 * math.pi / 5),
        centerY + size.width / 2 * math.sin(i * 2 * math.pi / 5),
      );
    }
    path.close();

    // Draw the rotated pentagon
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}

class Lever extends StatefulWidget {
  BluetoothDevice? get connectedDevice => null;
  final void Function(String) sendCommand; // Define sendCommand with a String parameter

  Lever({required this.sendCommand});

  @override
  _LeverState createState() => _LeverState();
}

class _LeverState extends State<Lever> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  double _leverPosition = 0.5;
  double sensitivity = 100.0; // Adjust the sensitivity value

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 300),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onVerticalDragUpdate: (details) {
        setState(() {
          // Adjust the sensitivity here
          _leverPosition -= details.delta.dy / sensitivity;
          if (_leverPosition < 0.0) {
            _leverPosition = 0.0;
          } else if (_leverPosition > 1.0) {
            _leverPosition = 1.0;
          }
          // Determine the command based on lever position and send it via Bluetooth
          if (_leverPosition > 0.5) {
            widget.sendCommand('WAVE 64'); // Example command for moving forward
          } else {
            widget.sendCommand('WAVE 0'); // Example command for moving backward
          }
        });
      },
      onVerticalDragEnd: (details) {
        _controller.animateTo(
          _leverPosition,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        );
      },
      child: Container(
        width: 50,
        height: 200,
        decoration: BoxDecoration(
          color: Colors.grey[300],
          borderRadius: BorderRadius.circular(10),
        ),
        child: Stack(
          children: [
            AnimatedBuilder(
              animation: _controller,
              builder: (context, child) {
                return Positioned(
                  top: (200 - 50) * (1 - _controller.value), // Subtract lever height
                  child: Container(
                    width: 50,
                    height: 50,
                    decoration: BoxDecoration(
                      color: Colors.green,
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

}
